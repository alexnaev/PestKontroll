@using Microsoft.AspNetCore.Identity
@using PestKontroll.Models.Enums
@using PestKontroll.Services.Interfaces

@model PestKontroll.Models.ViewModels.DashboardViewModel

@inject UserManager<PKUser> UserManager
@inject IPKRoleService RoleService

@{
	ViewData["Title"] = "Dashboard";
	
	PKUser pkUser = await UserManager.GetUserAsync(User);
}

<!-- Styles -->
<style>
	.amDark {
		background-color: #30303d;
		color: #fff;
	}

	#chartdiv {
		width: 100%;
		height: 500px;
	}

	.active-projects {
		background-color: rgba(54, 162, 235, 0.4);
		border-color: rgba(54, 162, 235, 0.2);
		border-style: solid;
		border-width: 2px;
		border-radius: 0.25rem;
	}

	.total-tickets {
		background-color: rgba(255, 206, 86, 0.4);
		border-color: rgba(255, 206, 86, 1);
		border-style: solid;
		border-width: 2px;
		border-radius: 0.25rem;
	}

	.unassigned-tickets {
		background-color: rgba(255, 99, 132, 0.4);
		border-color: rgba(255, 99, 132, 1);
		border-style: solid;
		border-width: 2px;
		border-radius: 0.25rem;
	}

	.total-data {
		background-color: rgba(75, 192, 192, 0.4);
		border-color: rgba(75, 192, 192, 1);
		border-style: solid;
		border-width: 2px;
		border-radius: 0.25rem;
	}
</style>

@*<a href="javascript:void(0);">
	@if (pkUser.AvatarFileData != null)
	{
		<img class="media-object" src="data:image/*;base64,@Convert.ToBase64String(pkUser.AvatarFileData)" alt="" />
	}
	else
	{
		<img class="media-object" src="https://cdn.icon-icons.com/icons2/1378/PNG/512/avatardefault_92824.png" alt="" style="width:30px;height:30px" />
	}
</a>
<br />
<strong>@pkUser.FullName</strong>
<span class="text-muted" style="font-size:x-small;">
	<strong>@Model.Company.Name</strong>
</span>*@


<div>
	<div classxfont-weighteighteightgetainer-fluid">
		<!-- Info Pills -->
		<div class="row mt-2">
			<div class="col-lg-3 col-md-6 col-sm-6">
				<a asp-action="AllProjects" asp-controller="Projects" style="text-decoration:none">
					<div class="card text-center shadow">
						<div class="body active-projects">
							<div class="p-15 text-dark">
								<h3>@Model.Projects.Where(p => p.StartDate < DateTime.Now && p.EndDate > DateTime.Now).Count()</h3>
								<span>Active Projects</span>
							</div>
						</div>
					</div>
				</a>
			</div>
			<div class="col-lg-3 col-md-6 col-sm-6">
				<a asp-action="AllTickets" asp-controller="Tickets" style="text-decoration:none">
					<div class="card text-center shadow">
						<div class="body total-tickets">
							<div class="p-15 text-dark">

								<h3>@Model.Tickets.Count()</h3>
								<span>Total Tickets</span>
							</div>
						</div>
					</div>
				</a>
			</div>
			<div class="col-lg-3 col-md-6 col-sm-6">
				@if (User.IsInRole(nameof(Roles.Admin)) || User.IsInRole(nameof(Roles.ProjectManager)))
				{
					<a asp-action="UnassignedTickets" asp-controller="Tickets" style="text-decoration:none">
						<div class="card text-center shadow">
							<div class="body unassigned-tickets">
								<div class="p-15 text-dark">
									<h3>@Model.Tickets.Where(t => string.IsNullOrEmpty(t.DeveloperUserId)).Count()</h3>
									<span>Unassigned Tickets</span>
								</div>
							</div>
						</div>
					</a>
				}
				else
				{
					<div class="card text-center shadow">
						<div class="body unassigned-tickets">
							<div class="p-15 text-dark">
								<h3>@Model.Tickets.Where(t => string.IsNullOrEmpty(t.DeveloperUserId)).Count()</h3>
								<span>Unassigned Tickets</span>
							</div>
						</div>
					</div>
				}
			</div>
			<div class="col-lg-3 col-md-6 col-sm-6">
				<a asp-action="Index" asp-controller="Companies" style="text-decoration:none">
					<div class="card text-center shadow">
						<div class="body total-data">
							<div class="p-15 text-dark">
								<h3>
									@Model.Members.Count()
								</h3>
								<span>Total Members</span>
							</div>
						</div>
					</div>
				</a>
			</div>
		</div>
		<div class="row gy-2">
			<div class="col-md-12 col">
				<div class="row col-cols-4 mt-3">
					<div class="card col m-1 p-2">
						<div class="card-body">
							<h5>Projects by Priority</h5>
							<div class="col-md-12">
								<canvas id="projectsByPri"></canvas>
							</div>
						</div>
					</div>
					<div class="card col m-1 p-2">
						<div class="card-body">
							<h5>Project Tickets Count</h5>
							<div class="col-md-12">
								<canvas id="projectTicketsCount"></canvas>
							</div>
						</div>
					</div>
					@* Projects Table *@
					<div class="card col-6 m-1 p-2">
								<div class="card-header">
									<h4>Projects</h4>
								</div>
								<div class="card-body">
									<div class="table-responsive" style="overflow-y:auto;height:250px;">
										<table class="table table-hover">
											<thead class="">
												<tr>
													<th>Name</th>
													<th>Start Date</th>
													<th>End Date</th>
													<th>Priority</th>
													<th>Details</th>
												</tr>
											</thead>
											<tbody>
												@foreach (var project in Model.Projects.OrderByDescending(t => t.EndDate))
												{
													<tr>
														<td><a asp-action="Details" asp-controller="Projects" asp-route-id="@project.id" style="color:black"><strong>@project.Name</strong></a> </td>
														<td><span style="font-size:small">@project.StartDate.ToString("dd.MM.yyyy")</span></td>
														<td><span style="font-size:small">@project.EndDate.ToString("dd.MM.yyyy")</span></td>
														<td>
															@if (project.ProjectPriority?.Name == "Low")
															{
																<span class="badge bg-success">
																	@project.ProjectPriority?.Name
																</span>
															}
															else if(project.ProjectPriority?.Name == "Medium")
															{
																<span class="badge bg-primary">
																	@project.ProjectPriority?.Name
																</span>
															}
															else if(project.ProjectPriority?.Name == "High")
															{
																<span class="badge bg-warning">
																	@project.ProjectPriority?.Name
																</span>
															}
															else if (project.ProjectPriority?.Name == "Urgent")
															{
																<span class="badge bg-danger">
																	@project.ProjectPriority?.Name
																</span>
															}
														</td>
														<td>
															<a class="btn btn-sm btn-outline-secondary" asp-action="Details" asp-controller="Projects" asp-route-id="@project.id"><i class="fs-5 bi-justify"></i></a>
														</td>
													</tr>
												}
											</tbody>
										</table>
									</div>
								</div>
								<div class="card-footer">
								</div>
							</div>
				</div>
			</div>
		</div>
		@*<div class="row gy-2">
			<div class="cols mt-5">
				<div class="card col m-1 p-2">
					<div class="card-body" style="height:600px">
						<h5>Project: Tickets vs Developers</h5>
						<p>[amCharts]</p>
						<!-- HTML -->
						<div id="chartdiv"></div>
					</div>
				</div>
			</div>
		</div>
		<div class="row gy-2">
		<div class="cols mt-5">
			<div class="card col m-1 p-2">
				<div class="card-body" style="height:600px;overflow-y:auto;">
					<h5>Project: Tickets vs Developers</h5>
					<p>[Plotly]</p>	
					<!-- HTML -->
					<div id="plotlyChart"></div>
				</div>
			</div>
		</div>*@
	</div>
	</div>
	<div class="mt-3 ">
		<div class="row">
			@* Tickets Table *@
			<div class="card col-6 m-1 p-2">
						<div class="card-header">
							<h4>Tickets</h4>
						</div>
						<div class="card-body">
							<div class="table-responsive" style="overflow-y:auto;height:250px;">
								<table class="table table-hover">
									<thead class="">
										<tr>
											<th>Title</th>
											<th>Developer</th>
											<th>Status</th>
											<th>Priority</th>
											<th>Date</th>
											<th>Details</th>
										</tr>
									</thead>
									<tbody>
										@foreach (var ticket in Model.Tickets.OrderByDescending(d => d.Created))
										{
											<tr>
												<td><a asp-action="Details" asp-controller="Tickets" asp-route-id="@ticket.Id" style="color:black"><strong>@ticket.Title</strong></a> </td>
												<td>
													@if (ticket.DeveloperUserId != null)
													{
														@ticket.DeveloperUser?.FullName
													}
													else
													{
														<span class="badge bg-warning text-dark">Unassigned</span>
													}
												</td>
													@if (ticket.TicketStatus.Name == "New")
													{
														<td><span class="badge bg-danger rounded-pill">@ticket.TicketStatus.Name </span></td>

													}
													else if (ticket.TicketStatus.Name == "Development")
													{
														<td><span class="badge bg-warning rounded-pill">@ticket.TicketStatus.Name </span></td>
													}
													else if (ticket.TicketStatus.Name == "Testing")
													{
														<td><span class="badge bg-primary rounded-pill">@ticket.TicketStatus.Name </span></td>
													}
													else if (ticket.TicketStatus.Name == "Resolved")
													{
														<td><span class="badge bg-success rounded-pill">@ticket.TicketStatus.Name </span></td>
													}
												<td>
												@if (ticket.TicketPriority.Name == "Low")
													{
														<span class="badge bg-success">
															@ticket.TicketPriority.Name
														</span>
													}
												else if (ticket.TicketPriority.Name == "Medium")
													{
														<span class="badge bg-primary">
															@ticket.TicketPriority.Name
														</span>
													}
												else if (ticket.TicketPriority.Name == "High")
													{
														<span class="badge bg-warning">
															@ticket.TicketPriority.Name
														</span>
													}
												else if (ticket.TicketPriority.Name == "Urgent")
													{
														<span class="badge bg-danger">
															@ticket.TicketPriority.Name
														</span>
													}
												</td>
												<td><span style="font-size:small">@ticket.Created.ToString("dd.MM.yyyy")</span></td>
												<td>
													<a class="btn btn-sm btn-outline-secondary" asp-action="Details" asp-controller="Tickets" asp-route-id="@ticket.Id"><i class="fs-5 bi-justify"></i></a>
												</td>
											</tr>
										}
									</tbody>
								</table>
							</div>
						</div>
						<div class="card-footer">
						</div>
					</div>
		<div class="card col m-1 p-2">
			<div class="card-body">
				<h5>Tickets by Priority</h5>
				<div class="col-md-12">
					<canvas id="ticketPriority"></canvas>
				</div>
			</div>
		</div>
		<div class="card col m-1 p-2">
			<div class="card-body">
				<h5>Tickets by Status</h5>
				<!-- ChartJS: Pie/Doughnut -->
				<div class="col-md-12">
					<!--  Chart.js Canvas Tag -->
					<canvas id="donutChart"></canvas>
				</div>
			</div>
		</div>
			@*<div class="col-md-2 ">
				<div class="">
					<div class="card m-1 p-2">
						<div class="card-header">
							<h2>Members</h2>
							<hr />
						</div>
						<div class="card-body" style="overflow-y:auto;height:600px;background-color:antiquewhite">
							<ul class="right_chat list-unstyled mb-0">
								@foreach (PKUser member in Model.Members)
								{
									<li class="">
										<a href="">
											<div class="media">
												@if (member.AvatarFileData != null)
												{
													<img class="rounded-circle" style="width:30px;height:30px;" src="data:image/*;base64,@(Convert.ToBase64String(member.AvatarFileData))" alt="" />
												}
												else
												{
													<img class="rounded-circle" style="width:30px;height:30px;" src="https://cdn.icon-icons.com/icons2/1378/PNG/512/avatardefault_92824.png" alt="" />
												}

											</div>
										</a>
										<div class="">
											<span class="date" style="font-weight:bold">@member.FullName</span>
											<h6>@((await RoleService.GetUserRolesAsync(member)).FirstOrDefault())</h6>
										</div>
										<hr />
									</li>
								}
							</ul>
						</div>
					</div>
				</div>
			</div>*@
		</div>
	</div>
</div>
@section scripts{
	<!-- *** Begin Chart JS Pie/Donut *** -->
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.6.0/dist/chart.min.js"></script>
	<script>
		var projectsTicketsData = [];
		var projectsTicketsLabels = [];
	</script>
	@foreach (var project in Model.Projects)
	{
		<script>
			projectsTicketsData.push(@project.Tickets.Count());
			projectsTicketsLabels.push('@project.Name');
		</script>
	}
<script>

	var donutChartCanvas = $('#donutChart').get(0).getContext('2d');
	var donutData = {
			labels: [
				'@nameof(PKTicketStatus.New)',
				'@nameof(PKTicketStatus.Development)',
				'@nameof(PKTicketStatus.Testing)',
				'@nameof(PKTicketStatus.Resolved)'
		],
		datasets: [
			{
				data: [
					@Model.Tickets.Where(t=> t.TicketStatus.Name ==nameof(PKTicketStatus.New)).Count(),
					@Model.Tickets.Where(t=> t.TicketStatus.Name == nameof(PKTicketStatus.Development)).Count(),
					@Model.Tickets.Where(t=> t.TicketStatus.Name ==nameof(PKTicketStatus.Testing)).Count(),
					@Model.Tickets.Where(t=> t.TicketStatus.Name ==nameof(PKTicketStatus.Resolved)).Count()
				],
				backgroundColor: [
					'rgba(255, 99, 132, 0.2)',
					'rgba(255, 206, 86, 0.2)',
					'rgba(54, 162, 235, 0.2)',
					'rgba(75, 192, 192, 0.2)'
				],
				borderColor: [
					'rgba(255, 99, 132, 1)',
					'rgba(255, 206, 86, 1)',
					'rgba(54, 162, 235, 1)',
					'rgba(75, 192, 192, 1)'
				]
			}
		]
	};

		var donutOptions = {
			maintainAspectRatio: false,
			responsive: true,
		};
		//Create pie or douhnut chart
		// You can switch between pie and douhnut using the method below.
		new Chart(donutChartCanvas, {
			type: 'doughnut',
			data: donutData,
			options: donutOptions
		});

		//Project Tickets Count
		var projectTicketsChartCanvas = $('#projectTicketsCount').get(0).getContext('2d');
		var projectTicketsData = {
			labels: projectsTicketsLabels,
			datasets: [
				{
					data: projectsTicketsData,
					backgroundColor: [
						'rgba(255, 206, 86, 0.2)',
						'rgba(54, 162, 235, 0.2)',
						'rgba(75, 192, 192, 0.2)'
					],
					borderColor: [
						'rgba(255, 206, 86, 1)',
						'rgba(54, 162, 235, 1)',
						'rgba(75, 192, 192, 1)'
					]
				}
			]
		};

		var projectTicketsOptions = {
			maintainAspectRatio: false,
			responsive: true,
		};
		//Create pie or douhnut chart
		// You can switch between pie and douhnut using the method below.
		new Chart(projectTicketsChartCanvas, {
			type: 'doughnut',
			data: projectTicketsData,
			options: projectTicketsOptions
		});

		//Projects By Priority
		var projectsByPriChartCanvas = $('#projectsByPri').get(0).getContext('2d');
		var projectsByPriData = {
			labels: [
				'@nameof(PKProjectPriority.Low)',
				'@nameof(PKProjectPriority.Medium)',
				'@nameof(PKProjectPriority.High)',
				'@nameof(PKProjectPriority.Urgent)'
			],
			datasets: [
				{
					data: [
							@Model.Projects.Where(p=> p.ProjectPriority.Name == nameof(PKProjectPriority.Low)).Count(),
							@Model.Projects.Where(p=> p.ProjectPriority.Name == nameof(PKProjectPriority.Medium)).Count(),
							@Model.Projects.Where(p=> p.ProjectPriority.Name == nameof(PKProjectPriority.High)).Count(),
							@Model.Projects.Where(p=> p.ProjectPriority.Name == nameof(PKProjectPriority.Urgent)).Count(),
					],
					backgroundColor: [
						'rgba(75, 192, 192, 0.2)',
						'rgba(54, 162, 235, 0.2)',
						'rgba(255, 206, 86, 0.2)',
						'rgba(255, 99, 132, 0.2)',
					],
					borderColor: [
						'rgba(75, 192, 192, 1)',
						'rgba(54, 162, 235, 1)',
						'rgba(255, 206, 86, 1)',
						'rgba(255, 99, 132, 1)',
					]
				}
			]
		};

		var projectsByPriOptions = {
			maintainAspectRatio: false,
			responsive: true,
		};
		//Create pie or douhnut chart
		// You can switch between pie and douhnut using the method below.
		new Chart(projectsByPriChartCanvas, {
			type: 'pie',
			data: projectsByPriData,
			options: projectsByPriOptions
		});

		//Ticket By Priority
		var ticketPriorityChartCanvas = $('#ticketPriority').get(0).getContext('2d');
		var ticketPriorityData = {
			labels: [
				'@nameof(PKTicketPriority.Low)',
				'@nameof(PKTicketPriority.Medium)',
				'@nameof(PKTicketPriority.High)',
				'@nameof(PKTicketPriority.Urgent)'
			],
			datasets: [
				{
					data: [
							@Model.Tickets.Where(t=>t.TicketPriority.Name == nameof(PKTicketPriority.Low)).Count(),
							@Model.Tickets.Where(t=>t.TicketPriority.Name == nameof(PKTicketPriority.Medium)).Count(),
							@Model.Tickets.Where(t=>t.TicketPriority.Name == nameof(PKTicketPriority.High)).Count(),
							@Model.Tickets.Where(t=>t.TicketPriority.Name == nameof(PKTicketPriority.Urgent)).Count(),
					],
					backgroundColor: [
						'rgba(75, 192, 192, 0.2)',
						'rgba(54, 162, 235, 0.2)',
						'rgba(255, 206, 86, 0.2)',
						'rgba(255, 99, 132, 0.2)',
					],
					borderColor: [
						'rgba(75, 192, 192, 1)',
						'rgba(54, 162, 235, 1)',
						'rgba(255, 206, 86, 1)',
						'rgba(255, 99, 132, 1)',
					]
				}
			]
		};

		var ticketPriorityOptions = {
			maintainAspectRatio: false,
			responsive: true,
		};
		//Create pie or douhnut chart
		// You can switch between pie and douhnut using the method below.
		new Chart(ticketPriorityChartCanvas, {
			type: 'pie',
			data: ticketPriorityData,
			options: ticketPriorityOptions
		});
</script>
<!-- *** End Chart JS Donut *** -->

<!--  Plotly Charts  -->
<!-- Load plotly.js into the DOM -->
<script src='https://cdn.plot.ly/plotly-2.4.2.min.js'></script>
@*<script>
	$.ajax({
		type: "POST",
		url: "/Home/PlotlyBarChart",
		data: '{}',
		contentType: "application/json; charset=utf-8",
		dataType: "json",
		success: function (result) {
			var data = result;

			var layout = {barmode: 'group'};

			Plotly.newPlot('plotlyChart', data, layout);
			},
			failure: function (result) {
				alert(result.d);
			},
			error: function (result) {
				alert(result.d);
			}
		});
</script>
*@}